runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("qs")
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
renv::snapshot()
renv::snapshot()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages("sf")
runApp('app')
runApp('app')
con = DBI::dbConnect("F:/full_dataset.duckdb")
con = DBI::dbConnect(duckdb::duckdb(), dbdir = "F:/full_dataset.duckdb", read_only = TRUE)
dbListTables(con)
test = dplyr::tbl(con, "discharge_mach") %>% filter(SITENO == "08171300")
test
test = dplyr::tbl(con, "discharge_mach") %>% filter(SITENO == "08171300") %>% collect()
View(test)
rm(con, test)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
con = DBI::dbConnect(duckdb::duckdb(), dbdir = "F:/full_dataset.duckdb", read_only = TRUE)
DBI::dbListTables(con)
test = dplyr::tbl(con, "discharge_mach")
test
test = dplyr::tbl(con, "mach_daily")
test
test = dplyr::tbl(con, "mopex_daily")
test
renv::snapshot()
shiny::runApp('app')
site_ids = c("08171300", "01013500")
example = dplyr::tbl(con, "discharge_mach") %>% dplyr::filter(SITENO %in% site_ids)
con
dbListTables(con)
DBI::dbListTables(con)
library(shiny)
library(bslib)
library(leaflet)
library(sf)
library(shinyjs)
library(shinybusy)
library(shinyalert)
library(shinycssloaders)
library(duckdb)
library(dplyr)
library(DBI)
library(DT)
library(dbplyr)
library(qs)
library(readr)
library(lubridate)
test
con = DBI::dbConnect(duckdb::duckdb(), dbdir = “F:/full_dataset.duckdb”, read_only = TRUE)
con = DBI::dbConnect(duckdb::duckdb(), dbdir = "F:/full_dataset.duckdb", read_only = TRUE)
DBI::dbListTables(con)
test = dplyr::tbl(con, "discharge_mach")
test
test = dplyr::tbl(con, "discharge_mach") %>% dplyr::filter(SITENO %in% site_ids)
test
test = dplyr::tbl(con, "discharge_mach") %>% dplyr::filter(SITENO %in% site_ids) %>% collect()
View(test)
example = dplyr::tbl(con, "site_info")
example
test
runApp('app')
runApp('app')
runApp('app')
test = qs::qread("F:/MACHexplorer/data/discharge_mach.qs")
test = qs::qread("F:/MACHexplorer/app/data/discharge_mach.qs")
View(test)
getwd()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
install.packages(c("reactable", "reactable.extras"))
renv::snapshot()
renv::snapshot()
renv::snapshot()
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
remove.packages("reactable")
remove.packages("reactable.extras")
renv::snapshot()
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
run_app()
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
library(qs)
mopex = read_csv("F:/MACH/MACH_Explorer/data/discharge_mopex.csv")
qs::qsave(mopex, "F:/MACHexplorer/app/data/discharge_mopex.qs")
shiny::runApp('app')
file = read_csv("F:/MACH/MACH_Explorer/data/timeseries/MOPEX/basin_02236000_MOPEX.csv")
file = file %>% mutate(YEAR = year(DATE))
View(file)
record_counts = file %>% filter(!is.na(OBSQ)) %>%
count(YEAR, name = "nonmissing")
View(record_counts)
mopex = read_csv("F:/MACH/MACH_Explorer/data/discharge_mopex.csv")
qs::qsave(mopex, "F:/MACHexplorer/app/data/discharge_mopex.qs")
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
# land cover files, combine into single dataframe
land_cover_folder <- "F:/MACH/MACH_Explorer/data/land_cover"
land_cover_files <- list.files(land_cover_folder, pattern = "\\.csv$", full.names = TRUE)
extract_year <- function(fname) {
as.integer(gsub(".*(\\d{4}).*", "\\1", basename(fname)))
}
land_cover_df <- map_dfr(land_cover_files, function(file) {
year <- extract_year(file)
df <- read_csv(file, show_col_types = FALSE)
df$YEAR <- year
df
})
library(DBI)
library(duckdb)
library(dplyr)
library(purrr)
library(readr)
land_cover_df <- map_dfr(land_cover_files, function(file) {
year <- extract_year(file)
df <- read_csv(file, show_col_types = FALSE)
df$YEAR <- year
df
})
View(land_cover_df)
test <- land_cover_df %>%
select(-c("YR", "12.00"))
View(test)
land_cover_df = test
rm(test)
land_cover_df <- land_cover_df %>% relocate(YEAR, .after = SITENO)
View(land_cover_df)
land_cover_df <- land_cover_df %>% rename(
"Water" = "11", "Ice_snow" = "12", "Open_space" = "21", "Low_intensity" = "22", "Med_intensity" = "23",
"High_intensity" = "24", "Barren" = "31", "Deciduous" = "41", "Evergreen" = "42", "Mixed_forest" = "43",
"Shrub" = "52", "Grassland" = "71", "Pasture" = "81", "Crops" = "82", "Woody_wet" = "90", "Herbaceous_wet" = "95")
getwd()
con <- dbConnect(duckdb::duckdb(), dbdir = "full_dataset.duckdb")
dbWriteTable(con, "land_cover", land_cover_df, overwrite = TRUE)
dbExecute(con, "CREATE INDEX idx_siteno_lc ON land_cover(SITENO)")
dbExecute(con, "CREATE INDEX idx_year_lc ON land_cover(YEAR)")
# Done
dbDisconnect(con, shutdown = TRUE)
rm(land_cover_df)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
bs_theme_preview()
library(shiny)
library(bslib)
ui <- page_navbar(
title = "Test App",
theme = bs_theme(),
nav_panel("Map",
fluidRow(
column(6,
card(
title = "My Leaflet Map",
leaflet::leafletOutput("my_map", height = 300)
)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- leaflet::renderLeaflet({
leaflet::leaflet() |> leaflet::addTiles()
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(leaflet)
ui <- page_navbar(
title = "Card Test",
theme = bs_theme(),
nav_panel("Map",
fluidRow(
column(6,
card(
title = "My Leaflet Map",
card_body(
leafletOutput("my_map", height = 300)
)
)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- renderLeaflet({
leaflet() |> addTiles()
})
}
shinyApp(ui, server)
package_version("bslib")
packageVersion("bslib")
library(shiny)
library(bslib)
library(leaflet)
ui <- page_navbar(
title = "Card Test",
theme = bs_theme(version = 5),  # <---- critical line
nav_panel("Map",
card(
title = "Map Title",
card_body(
leafletOutput("my_map", height = 300)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- renderLeaflet({
leaflet() |> addTiles()
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(leaflet)
ui <- page_navbar(
title = "Card Test",
theme = bs_theme(version = 5),
nav_panel("Map",
card(
title = "Map Title",
card_body(
leafletOutput("my_map", height = 300)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- renderLeaflet({
leaflet() |> addTiles()
})
}
shinyApp(ui, server)
library(shiny)
library(bslib)
library(leaflet)
ui <- page_navbar(
title = "Card Test",
theme = bs_theme(version = 5),
nav_panel("Map",
card(
card_header("Map Title"),
card_body(
leafletOutput("my_map", height = 300)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- renderLeaflet({
leaflet() |> addTiles()
})
}
shinyApp(ui, server)
ui <- page_navbar(
title = "Card Test",
theme = bs_theme(version = 5),
nav_panel("Map",
card(
title = "Map Title",
card_body(
leafletOutput("my_map", height = 300)
)
)
)
)
server <- function(input, output, session) {
output$my_map <- renderLeaflet({
leaflet() |> addTiles()
})
}
shinyApp(ui, server)
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
runApp('app')
ui <- page_navbar(
title = "Penguins dashboard",
sidebar = color_by,
nav_spacer(),
nav_panel("Bill Length", cards[[1]]),
nav_panel("Bill Depth", cards[[2]]),
nav_panel("Body Mass", cards[[3]]),
nav_item(tags$a("Posit", href = "https://posit.co"))
)
shiny::runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
renv::snapshot()
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
runApp('app')
runApp('app')
runApp('app')
shiny::runApp('app')
shiny::runApp('app')
shiny::runApp('app')
R.version
renv::snapshot()
renv::snapshot()
